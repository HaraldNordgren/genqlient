// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package test

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/Khan/genqlient/internal/testutil"
)

// QueryWithAllResponse is returned by QueryWithAll on success.
type QueryWithAllResponse struct {
	// user looks up a user by some stuff.
	//
	// See UserQueryInput for what stuff is supported.
	// If query is null, returns the current user.
	User QueryWithAllUser `json:"user"`
}

// GetUser returns QueryWithAllResponse.User, and is useful for accessing the field via an interface.
func (v *QueryWithAllResponse) GetUser() QueryWithAllUser { return v.User }

// QueryWithAllUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A User is a user!
type QueryWithAllUser struct {
	// id is the user's ID.
	//
	// It is stable, unique, and opaque, like all good IDs.
	Id                    testutil.ID `json:"id"`
	Roles                 []Role      `json:"roles"`
	Name                  string      `json:"name"`
	Emails                []string    `json:"emails"`
	EmailsOrNull          []string    `json:"emailsOrNull"`
	EmailsWithNulls       []string    `json:"emailsWithNulls"`
	EmailsWithNullsOrNull []string    `json:"emailsWithNullsOrNull"`
	Birthdate             time.Time   `json:"-"`
}

// GetId returns QueryWithAllUser.Id, and is useful for accessing the field via an interface.
func (v *QueryWithAllUser) GetId() testutil.ID { return v.Id }

// GetRoles returns QueryWithAllUser.Roles, and is useful for accessing the field via an interface.
func (v *QueryWithAllUser) GetRoles() []Role { return v.Roles }

// GetName returns QueryWithAllUser.Name, and is useful for accessing the field via an interface.
func (v *QueryWithAllUser) GetName() string { return v.Name }

// GetEmails returns QueryWithAllUser.Emails, and is useful for accessing the field via an interface.
func (v *QueryWithAllUser) GetEmails() []string { return v.Emails }

// GetEmailsOrNull returns QueryWithAllUser.EmailsOrNull, and is useful for accessing the field via an interface.
func (v *QueryWithAllUser) GetEmailsOrNull() []string { return v.EmailsOrNull }

// GetEmailsWithNulls returns QueryWithAllUser.EmailsWithNulls, and is useful for accessing the field via an interface.
func (v *QueryWithAllUser) GetEmailsWithNulls() []string { return v.EmailsWithNulls }

// GetEmailsWithNullsOrNull returns QueryWithAllUser.EmailsWithNullsOrNull, and is useful for accessing the field via an interface.
func (v *QueryWithAllUser) GetEmailsWithNullsOrNull() []string { return v.EmailsWithNullsOrNull }

// GetBirthdate returns QueryWithAllUser.Birthdate, and is useful for accessing the field via an interface.
func (v *QueryWithAllUser) GetBirthdate() time.Time { return v.Birthdate }

func (v *QueryWithAllUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*QueryWithAllUser
		Birthdate json.RawMessage `json:"birthdate"`
		graphql.NoUnmarshalJSON
	}
	firstPass.QueryWithAllUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Birthdate
		src := firstPass.Birthdate
		if len(src) != 0 && string(src) != "null" {
			err = testutil.UnmarshalDate(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal QueryWithAllUser.Birthdate: %w", err)
			}
		}
	}
	return nil
}

type __premarshalQueryWithAllUser struct {
	Id testutil.ID `json:"id"`

	Roles []Role `json:"roles"`

	Name string `json:"name"`

	Emails []string `json:"emails"`

	EmailsOrNull []string `json:"emailsOrNull"`

	EmailsWithNulls []string `json:"emailsWithNulls"`

	EmailsWithNullsOrNull []string `json:"emailsWithNullsOrNull"`

	Birthdate json.RawMessage `json:"birthdate"`
}

func (v *QueryWithAllUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *QueryWithAllUser) __premarshalJSON() (*__premarshalQueryWithAllUser, error) {
	var retval __premarshalQueryWithAllUser

	retval.Id = v.Id
	retval.Roles = v.Roles
	retval.Name = v.Name
	retval.Emails = v.Emails
	retval.EmailsOrNull = v.EmailsOrNull
	retval.EmailsWithNulls = v.EmailsWithNulls
	retval.EmailsWithNullsOrNull = v.EmailsWithNullsOrNull
	{

		dst := &retval.Birthdate
		src := v.Birthdate
		var err error
		*dst, err = testutil.MarshalDate(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal QueryWithAllUser.Birthdate: %w", err)
		}
	}
	return &retval, nil
}

// Role is a type a user may have.
type Role string

const (
	// What is a student?
	//
	// A student is primarily a person enrolled in a school or other educational institution and who is under learning with goals of acquiring knowledge, developing professions and achieving employment at desired field. In the broader sense, a student is anyone who applies themselves to the intensive intellectual engagement with some matter necessary to master it as part of some practical affair in which such mastery is basic or decisive.
	//
	// (from [Wikipedia](https://en.wikipedia.org/wiki/Student))
	RoleStudent Role = "STUDENT"
	// Teacher is a teacher, who teaches the students.
	RoleTeacher Role = "TEACHER"
)

func QueryWithAll(
	client graphql.Client,
) (*QueryWithAllResponse, error) {
	req := &graphql.Request{
		OpName: "QueryWithAll",
		Query: `
query QueryWithAll {
	user {
		id
		roles
		name
		emails
		emailsOrNull
		emailsWithNulls
		emailsWithNullsOrNull
		birthdate
	}
}
`,
	}
	var err error

	var data QueryWithAllResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		nil,
		req,
		resp,
	)

	return &data, err
}

